# business_agents/financial_agent.py

import json
from datetime import datetime
from pydantic import BaseModel, Field

# Import Azure OpenAI Service
from ..infrastructure_agents.services.azure_openai_service_enhanced import OpenAIRequest

class FinancialAnalysisResult(BaseModel):
    """
    Define la estructura del informe generado por el FinancialAgent.
    """
    solvencia: str = Field(description="An√°lisis de la solvencia de la empresa (capacidad de pago a largo plazo).")
    liquidez: str = Field(description="An√°lisis de la liquidez (capacidad de pago a corto plazo).")
    rentabilidad: str = Field(description="An√°lisis de la rentabilidad (capacidad de generar ganancias).")
    tendencia_ventas: str = Field(description="Descripci√≥n de la tendencia de las ventas (crecimiento, estancamiento, decrecimiento).")
    resumen_ejecutivo: str = Field(description="Un p√°rrafo final que resume la salud financiera general de la PYME.")
    success: bool = Field(description="Indica si el an√°lisis fue exitoso", default=True)
    tokens_used: int = Field(description="Tokens utilizados en el an√°lisis", default=0)

async def analyze_financial_document(azure_service, document_text: str) -> FinancialAnalysisResult:
    """
    Analiza el texto de un documento financiero y extrae un resumen estructurado usando Azure OpenAI.
    """
    print(f"üè¶ INICIANDO AN√ÅLISIS FINANCIERO")
    print(f"üìä Longitud del documento: {len(document_text)} caracteres")
    print(f"üîß Tipo de servicio: {type(azure_service).__name__}")
    
    try:
        # Verificar el servicio Azure antes de usarlo
        if not hasattr(azure_service, 'generate_completion'):
            raise Exception(f"Servicio Azure inv√°lido: {type(azure_service)}")

        print(f"‚úÖ Servicio Azure v√°lido: {type(azure_service).__name__}")
        if not document_text.strip():
            print(f"‚ö†Ô∏è DOCUMENTO VAC√çO")
            return FinancialAnalysisResult(
                solvencia="No hay datos financieros para analizar",
                liquidez="No hay datos financieros para analizar", 
                rentabilidad="No hay datos financieros para analizar",
                tendencia_ventas="No hay datos financieros para analizar",
                resumen_ejecutivo="No se proporcionaron datos financieros",
                success=False,
                tokens_used=0
            )

        prompt = f"""
        Eres un Analista Financiero Contable experto en Normas Internacionales de Informaci√≥n Financiera (NIIF) para PYMEs en Ecuador.
        Tu tarea es analizar el siguiente texto, extra√≠do de un estado financiero del portal de la Superintendencia de Compa√±√≠as (SCVS).

        **TEXTO DEL DOCUMENTO FINANCIERO:**
        {document_text}

        **TU AN√ÅLISIS:**
        Bas√°ndote √∫nicamente en el texto proporcionado, realiza un an√°lisis conciso de los siguientes puntos:
        1. **Solvencia:** Eval√∫a la capacidad de la empresa para cumplir con sus obligaciones a largo plazo.
        2. **Liquidez:** Eval√∫a la capacidad de la empresa para cubrir sus deudas a corto plazo.
        3. **Rentabilidad:** Eval√∫a la eficiencia de la empresa para generar beneficios.
        4. **Tendencia de Ventas:** Identifica y describe la evoluci√≥n de los ingresos o ventas.
        5. **Resumen Ejecutivo:** Proporciona un p√°rrafo final que consolide tu opini√≥n profesional sobre la salud financiera general.

        Responde √öNICAMENTE en formato JSON:
        {{
            "solvencia": "<an√°lisis detallado>",
            "liquidez": "<an√°lisis detallado>",
            "rentabilidad": "<an√°lisis detallado>",
            "tendencia_ventas": "<an√°lisis detallado>",
            "resumen_ejecutivo": "<resumen ejecutivo>"
        }}
        """

        print(f"üì§ ENVIANDO REQUEST A AZURE OPENAI...")
        
        request = OpenAIRequest(
            request_id=f"financial_analysis_{datetime.now().strftime('%H%M%S')}",
            user_id="system",
            agent_id="financial_agent",
            prompt=prompt,
            max_tokens=800,
            temperature=0.1,
            timestamp=datetime.now(),
            metadata={"timeout": 120}  # 2 minutos de timeout
        )

        response = await azure_service.generate_completion(
            request,
            "You are a financial analyst expert. Provide accurate JSON response.",
            use_mini_model=False  # Use GPT-4o for complex financial analysis
        )
        
        print(f"‚úÖ RESPUESTA RECIBIDA DE AZURE OPENAI")
        print(f"üìä Tokens usados: {response.tokens_used}")
        print(f"üìù Longitud de respuesta: {len(response.response_text)} caracteres")

        # Parse JSON response with improved handling
        try:
            # Clean the response text first
            response_content = response.response_text.strip()
            
            # Enhanced JSON extraction from markdown
            if "```json" in response_content.lower():
                # Find the start of JSON content after ```json
                start_pos = response_content.lower().find("```json") + 7
                # Find the end marker
                end_pos = response_content.find("```", start_pos)
                if end_pos != -1:
                    response_content = response_content[start_pos:end_pos].strip()
                else:
                    # No closing ```, take everything after ```json
                    response_content = response_content[start_pos:].strip()
            elif "```" in response_content and "{" in response_content:
                # Find the first { after any ```
                start_marker = response_content.find("```")
                json_start = response_content.find("{", start_marker)
                if json_start != -1:
                    # Find the matching closing }
                    brace_count = 0
                    json_end = json_start
                    for i, char in enumerate(response_content[json_start:], json_start):
                        if char == '{':
                            brace_count += 1
                        elif char == '}':
                            brace_count -= 1
                            if brace_count == 0:
                                json_end = i + 1
                                break
                    response_content = response_content[json_start:json_end]
            
            # Clean up any remaining markdown artifacts
            response_content = response_content.replace("```json", "").replace("```", "").strip()
            
            # Remove any leading/trailing whitespace and newlines
            response_content = response_content.strip()
            
            # Try to find JSON object if it's embedded in text
            if not response_content.startswith("{"):
                json_start = response_content.find("{")
                json_end = response_content.rfind("}") + 1
                if json_start != -1 and json_end > json_start:
                    response_content = response_content[json_start:json_end]
            
            result_data = json.loads(response_content)
            return FinancialAnalysisResult(
                solvencia=result_data.get("solvencia", "An√°lisis no disponible"),
                liquidez=result_data.get("liquidez", "An√°lisis no disponible"),
                rentabilidad=result_data.get("rentabilidad", "An√°lisis no disponible"),
                tendencia_ventas=result_data.get("tendencia_ventas", "An√°lisis no disponible"),
                resumen_ejecutivo=result_data.get("resumen_ejecutivo", "Resumen no disponible"),
                success=True,
                tokens_used=response.tokens_used
            )
        except json.JSONDecodeError as e:
            print(f"üö® JSON DECODE ERROR: {str(e)}")
            print(f"üìù RESPUESTA RAW: {response.response_text[:500]}...")
            
            # En lugar de devolver "An√°lisis disponible en respuesta completa"
            # Intenta extraer informaci√≥n √∫til de la respuesta raw
            raw_response = response.response_text
            
            # Si la respuesta contiene informaci√≥n financiera, √∫sala
            if any(word in raw_response.lower() for word in ['solvencia', 'liquidez', 'rentabilidad']):
                return FinancialAnalysisResult(
                    solvencia=raw_response[:200] + "...",
                    liquidez=raw_response[:200] + "...",
                    rentabilidad=raw_response[:200] + "...",
                    tendencia_ventas=raw_response[:200] + "...",
                    resumen_ejecutivo=raw_response[:300] + "...",
                    success=True,
                    tokens_used=response.tokens_used
                )
            else:
                # Si no hay informaci√≥n √∫til, devuelve error claro
                raise Exception(f"Respuesta no contiene an√°lisis financiero v√°lido: {raw_response[:100]}")

    except Exception as e:
        # Log the error for debugging
        print(f"üö® ERROR EN AGENTE FINANCIERO: {str(e)}")
        print(f"üö® TIPO DE ERROR: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        
        return FinancialAnalysisResult(
            solvencia=f"Error en an√°lisis financiero: {str(e)}",
            liquidez=f"Error en an√°lisis financiero: {str(e)}",
            rentabilidad=f"Error en an√°lisis financiero: {str(e)}",
            tendencia_ventas=f"Error en an√°lisis financiero: {str(e)}",
            resumen_ejecutivo=f"Error cr√≠tico en an√°lisis financiero: {str(e)}",
            success=False,
            tokens_used=0
        )

# Backward compatibility function
def analyze_financial_document_legacy(api_key: str, document_text: str) -> FinancialAnalysisResult:
    """
    Funci√≥n de compatibilidad hacia atr√°s (no recomendada para uso nuevo)
    """
    return FinancialAnalysisResult(
        solvencia="Legacy function called - upgrade to use Azure OpenAI Service",
        liquidez="Legacy function called - upgrade to use Azure OpenAI Service",
        rentabilidad="Legacy function called - upgrade to use Azure OpenAI Service",
        tendencia_ventas="Legacy function called - upgrade to use Azure OpenAI Service",
        resumen_ejecutivo="Legacy function called - upgrade to use Azure OpenAI Service",
        success=False,
        tokens_used=0
    )