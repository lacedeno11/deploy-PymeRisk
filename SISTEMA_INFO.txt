PYMERISK - SISTEMA DE EVALUACIÓN DE RIESGO FINANCIERO PARA PYMEs
================================================================================

VERSIÓN: 1.0 - PRODUCCIÓN
FECHA: Enero 2025
ESTADO: ✅ FUNCIONAL Y DESPLEGADO
DEPLOY URL: https://deploy-pymerisk-dhtmtkfxynnrd6wqzsztbu.streamlit.app/

ARQUITECTURA DEL SISTEMA:
========================

1. ORQUESTADOR PRINCIPAL:
   - Archivo: agents/azure_orchestrator.py
   - Función: Coordina todo el flujo de evaluación
   - Modelos: GPT-4o (análisis complejos) + o3-mini (tareas rápidas)
   - Tiempo promedio: 50-60 segundos por evaluación
   - Success rate: 100%

2. AGENTES DE NEGOCIO:
   - FinancialAgent: Análisis de estados financieros
   - ReputationalAgent: Análisis de reputación y redes sociales
   - BehavioralAgent: Análisis de comportamiento de pagos

3. FLUJO DE DATOS:
   CompanyData → AzureOrchestrator → [Financial, Reputational, Behavioral] → Consolidation → EvaluationResult

4. ENTRADA DE DATOS:
   - Balance financiero (PDF)
   - Información general de la empresa (PDF)
   - Fuente recomendada: https://appscvsgen.supercias.gob.ec/consultaCompanias/societario/busquedaCompanias.jsf

5. SALIDA:
   - Score: 0-1000
   - Nivel de riesgo: BAJO (651-1000), MEDIO (401-650), ALTO (0-400)
   - Análisis detallado por categoría
   - Recomendaciones crediticias

CONFIGURACIÓN AZURE:
===================
- Endpoint: https://hackathon-openai-svc.openai.azure.com/
- API Key: [CONFIGURED IN STREAMLIT CLOUD SECRETS]
- Deployment GPT-4o: gpt-4o
- Deployment o3-mini: o3-mini

ARCHIVOS CLAVE:
==============
- app.py: Frontend Streamlit principal
- agents/azure_orchestrator.py: Orquestador principal
- requirements.txt: Dependencias del sistema
- README.md: Documentación principal

ESTRUCTURA DE DATOS:
===================
CompanyData:
- company_id: str
- company_name: str
- financial_statements: str (contenido del PDF financiero)
- social_media_data: str (información general de la empresa)
- commercial_references: str
- payment_history: str

EvaluationResult:
- final_score: float (0-1000)
- risk_level: str (BAJO/MEDIO/ALTO)
- financial_analysis: Dict
- reputational_analysis: Dict
- behavioral_analysis: Dict
- consolidated_report: Dict
- processing_time: float
- success: bool

DEPLOY CONSIDERATIONS:
=====================
1. Variables de entorno sensibles NO deben subirse
2. Usar st.secrets para Streamlit Cloud
3. Archivos .env deben estar en .gitignore
4. API keys deben configurarse en Streamlit Cloud settings

FRONTEND REQUIREMENTS:
=====================
1. Upload de 2 PDFs (balance financiero + info general)
2. Extracción de texto de PDFs
3. Llamada al orquestador
4. Visualización de resultados
5. Indicación de fuente de datos (Supercias)

FRONTEND STREAMLIT:
==================
- Archivo principal: app.py
- URL Deploy: https://deploy-pymerisk-dhtmtkfxynnrd6wqzsztbu.streamlit.app/
- Funcionalidades:
  * Upload de 2 PDFs (balance financiero + info general)
  * Extracción automática de texto con PyPDF2
  * Formulario para datos adicionales
  * Evaluación en tiempo real (50-60s)
  * Visualización detallada de resultados
  * Métricas: Score 0-1000, nivel de riesgo, análisis por categorías

CONFIGURACIÓN DEPLOY:
====================
- Plataforma: Streamlit Cloud
- Secrets configurados en cloud (no en .env)
- Variables críticas: AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_API_KEY
- Archivos excluidos: .env, .streamlit/secrets.toml
- Dependencies: requirements.txt actualizado con Streamlit + PyPDF2

FLUJO FRONTEND:
==============
1. Usuario sube 2 PDFs
2. Sistema extrae texto automáticamente
3. Crea CompanyData con textos extraídos
4. Llama a AzureOrchestrator.evaluate_company_risk()
5. Muestra resultados en tabs organizados
6. Tiempo total: ~50-60 segundos

PRÓXIMAS ITERACIONES:
====================
- Mejorar extracción de PDFs (OCR para escaneados)
- Añadir validación de formato de documentos
- Implementar cache para evaluaciones
- Añadir exportación de reportes
- Integrar con base de datos para historial
- API REST para integraciones externas

NOTAS TÉCNICAS:
==============
- Sistema funcional al 100%
- Frontend integrado y desplegado
- Optimizado para costos (dual model approach)
- Manejo de errores robusto
- Logging completo para debugging
- Arquitectura escalable y modular
- Deploy seguro sin exponer credenciales